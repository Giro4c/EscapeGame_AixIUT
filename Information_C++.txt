Le C++ est un langage de programmation compilé incontournable pour les développeurs : il permet d'écrire des programmes informatiques, pour créer des applications mobiles ou des jeux vidéo, par exemple. 
C++ est créé à partir du langage C, dont il étend les fonctionnalités : C++ permet notamment de faire de la programmation orientée objet (POO).

Comme tout langage de programmation, il repose sur le l'algorithmie : l'exécution de suites d'opération élémentaires selon un processus défini pour aboutir à un résultat.
Il utilise ainsi des variables de stockage de valeur qui sont définies selon un type (nombre, caractère, chaine de caractère, booléen, etc...), des expressions logiques utilisées dans l'évaluation d'une condition, des boucles (répétition d'instruction dont la condition de fin est définie), etc...
<strong>Il est cependant sensible à la casse : c'est-à-dire que pour une instruction comme if (que l'on verra plus tard), écrire If avec une majuscule fera "planter" le programme. </strong>

Pour les variables, le C++ utilise un grand nombre de type définis sur un certain nombre de bits en fonction notamment du "préfixe" de celui ci.
Voici les types les plus communs utilisés :
    (Faire un tableau)
    - bool = un bouléen (vrai ou faux)
    - unsigned int = un entier naturel
    - int = un entier relatif
    - float = un nombre décimal
    - char = un caractère
    - string = une chaine de caractère (peut être un mot, une phrase, etc...)

Pour se retrouver dans un programme ou l'annoter, ajouter des commentaires, il existe deux syntaxes 
    // Un commentaire sur une seule ligne
    /* Un autre commentaire sur une seule ligne */
    /* Un commentaire sur 
    plusieurs lignes */

Voici quelques intructions généralisées et leur explication :

// Déclaration d'une variable de type nomType et de nom nomVar
nomType nomVar;

// Déclaration d'une variable de type nomType, de nom nomVar et inisialisation à la valeur val :
nomType nomVar = val; // ou : nomType nomVar (val);

// Modification d'une variable :
nomVar = val; // La variable prend la valeur val
nomVar = nomVar + val; // La variable est incrémentée de val. Ne fonctionne que si la variable a déjà été initialisée

// Expression de la condition :
if (Condition1) // Si la Condition1 est remplie alors...
{
    action1;
    action2; // ...exécute les instructions action1 et action2...
}
else if (Condition2) // ...sinon si la Condition2 est remplie alors...
{
    action3;
    action4; // ...exécute les instructions action1 et action2...
}
else // ...sinon...
{
    action5; // ...exécute l'instruction action5.
}

// Expression des boucles

// Boucle while (tant que la condition n'est pas remplie, répète l'exécution des instructions dans la boucle)
while (Condition1)
{
    action1;
    action2;
}

// Boucle infinie (sortie de la boucle avec l'instruction break)
while (true)
{
    action1;
    if (Condition1) break; // Sortie de la boucle si Condition1 remplie
    action2;
    if (Condition2) break; // Sortie de la boucle si Condition2 remplie
}

// Boucle for (une boucle de type while particulière : peut déclarer une variable propre à la boucle (un compteur) et exécuter une action à chaque fin de boucle)
for (nomType nomVar (val); Condition1; action1)
{
    action2;
    action3;
}

// Les procédures :

    // Déclaration :
void procedure1 (paramètres : types et noms)
{
    action1;
    action2;
}

    // Appel :
procedure1(Variable); 

// Les fonctions :

    // Déclaration :
nomType fonction1 (paramètres : types et noms) // Le type de la fonction dépend de la valeur qu'elle renvoie
{
    action1;
    action3;
    return val; // Renvoie une valeur de type nomType
}

    // Appel :
fonction1(Variable) // Comme une fonction renvoie une valeur, elle est appelée dans l'initialisation de variables, des comparaisons, etc...

